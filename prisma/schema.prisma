datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum CompanyRole {
  ADMIN
  STAFF
}

enum BusinessType {
  BARBERSHOP
  RESTAURANT
  RETAIL
}

enum ComponentType {
  MASTER
  TABLE
}

enum FieldType {
  TEXT
  NUMBER
  SELECT
  BOOLEAN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model User {
  id           Int             @id @default(autoincrement())
  email        String          @unique
  passwordHash String
  name         String?
  tg_id        Int?            @unique
  memberships  CompanyMember[]
  bookings     Booking[]
  Master       Master[]
}

model Company {
  id             Int             @id @default(autoincrement())
  name           String
  description    String?
  businessType   BusinessType
  businessTerm String?    // Термин/срок работы (если потребуется)
  city         String?    // Город
  street       String?    // Улица
  workTime     String?    // Режим работы
  holidays     String?    // Дни праздников или нерабочие дни
  descriptionAI String?   // AI-описание
  logo         String?    // URL логотипа
  calendar     String?    // Данные календаря (можно хранить в JSON, если потребуется)
  analytics    String?    // Данные аналитики
  telegram     String?    // Телеграм-аккаунт
  aiText       String?    // Текст, сгенерированный ИИ
  socials      String?    // Ссылки на социальные сети
  delivery     String?    // Данные о доставке

  members      CompanyMember[]
  branches     Branch[]
}


model CompanyMember {
  id        Int         @id @default(autoincrement())
  role      CompanyRole
  user      User        @relation(fields: [userId], references: [id])
  userId    Int
  company   Company     @relation(fields: [companyId], references: [id])
  companyId Int

  @@unique([userId, companyId])
}

model Branch {
  id        Int       @id @default(autoincrement())
  name      String
  address   String?
  company   Company   @relation(fields: [companyId], references: [id])
  companyId Int
  services  Service[]
  masters   Master[]
  tables    Table[]
  bookings  Booking[]
}

model Master {
  id       Int       @id @default(autoincrement())
  name     String
  photoUrl String?
  user     User?     @relation(fields: [userId], references: [id])
  userId   Int?
  branch   Branch    @relation(fields: [branchId], references: [id])
  branchId Int
  services Service[] @relation("ServiceMasters")

  bookings Booking[]
}

model Table {
  id       Int    @id @default(autoincrement())
  label    String
  seats    Int
  branch   Branch @relation(fields: [branchId], references: [id])
  branchId Int

  bookings Booking[] 
}

model Service {
  id           Int                @id @default(autoincrement())
  name         String
  description  String?
  durationMin  Int?
  price        Float?
  branch       Branch             @relation(fields: [branchId], references: [id])
  branchId     Int
  masters      Master[]           @relation("ServiceMasters")
  components   ServiceComponent[]
  customFields CustomField[]
  bookings     Booking[]
}

model ServiceComponent {
  id         Int           @id @default(autoincrement())
  type       ComponentType
  name       String?
  isRequired Boolean       @default(true)
  service    Service       @relation(fields: [serviceId], references: [id])
  serviceId  Int
}

model CustomField {
  id         Int                       @id @default(autoincrement())
  label      String
  fieldType  FieldType
  isRequired Boolean                   @default(false)
  options    String?
  service    Service                   @relation(fields: [serviceId], references: [id])
  serviceId  Int
  values     BookingCustomFieldValue[]
}

model BookingCustomFieldValue {
  id            Int         @id @default(autoincrement())
  value         String
  booking       Booking     @relation(fields: [bookingId], references: [id])
  bookingId     Int
  customField   CustomField @relation(fields: [customFieldId], references: [id])
  customFieldId Int
}

model Booking {
  id                Int                       @id @default(autoincrement())
  dateTime          DateTime
  status            BookingStatus             @default(PENDING)
  user              User                      @relation(fields: [userId], references: [id])
  userId            Int
  service           Service                   @relation(fields: [serviceId], references: [id])
  serviceId         Int
  branch            Branch                    @relation(fields: [branchId], references: [id])
  branchId          Int
  master            Master?                   @relation(fields: [masterId], references: [id])
  masterId          Int?
  table             Table?                    @relation(fields: [tableId], references: [id])
  tableId           Int?
  customFieldValues BookingCustomFieldValue[]
}
